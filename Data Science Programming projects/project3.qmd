---
title: "Client Report - Project 3"
subtitle: "Course DS 250"
author: "Tam Tran"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---
## Elevator pitch

_This project delves into baseball data to uncover insights about player performance, salaries, and career longevity. By leveraging the Lahman Baseball Database, we generate SQL queries that identify top players based on batting averages and career lengths, and provide valuable metrics like average salary by position and comparisons between teams. The queries are designed to give the client actionable insights they can display on their website, with results ordered by key performance indicators such as batting average and salary. This analysis also includes visualizations, offering a comprehensive view of trends across different teams and player categories. The goal is to enhance understanding of player performance, salary distribution, and career longevity in the sport._

```{python}
#| label: libraries
#| include: false
import sqlite3
import pandas as pd
from lets_plot import *
import numpy as np
from palmerpenguins import load_penguins
import plotly.express as px
LetsPlot.setup_html(isolated_frame=True)
```
__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__


```{python}
#| label: data
#| code-summary: Read and format project data
#Create a new dataframe:
conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """

SELECT DISTINCT
  collegeplaying.playerID,  
  salaries.salary, 
  salaries.yearID,
  salaries.teamID,
  collegeplaying.schoolID

FROM 
  collegeplaying

LEFT JOIN
  salaries ON salaries.playerID = collegeplaying.playerID

WHERE collegeplaying.schoolID = "idbyuid"

ORDER BY 
  salary DESC;

"""
df = pd.read_sql_query(p, conn)
df

```

__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats).__

__A. Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

```{python}
#| label: Q2A
#| code-summary: Read and format project data
#Create a new dataframe:
conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """
SELECT
  batting.playerID,
  batting.yearID,
  batting.H,
  batting.AB,
  batting.H / batting.AB AS batting_average

FROM
  batting

WHERE
  batting.AB >= 1 

ORDER BY
  batting_average DESC,
  batting.playerID ASC
"""
df = pd.read_sql_query(p, conn)
df.head(5)

```

__B. Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

```{python}
#| label: Q2B
#| code-summary: Read and format project data
#Create a new dataframe:
conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """
SELECT
  batting.playerID,
  batting.yearID,
  ROUND (CAST(batting.h AS float) / CAST(batting.ab AS float),2) AS batting_average 

FROM
  batting

WHERE
  batting.ab >= 10 

ORDER BY
  batting_average DESC,
  batting.playerID ASC
"""
df = pd.read_sql_query(p, conn)
df.head(5)

```

__C. Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

```{python}
#| label: Q2C
#| code-summary: Read and format project data
#Create a new dataframe:

## Second way: ROUND (SUM(CAST(batting.h AS float)) / SUM(CAST(batting.ab AS float)),3) AS batting_average ##

conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """
SELECT
  batting.playerID,
  batting.yearID,
  batting.h,
  batting.ab,
  ROUND (SUM(batting.h) * 1.0 / SUM(batting.ab), 3) AS batting_average 
FROM
  batting

GROUP BY playerID
HAVING SUM(AB) >= 100

ORDER BY
  batting_average DESC,
  batting.playerID ASC

LIMIT 5
"""
df = pd.read_sql_query(p, conn)
df.head(5)

```

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Lets-Plot to visualize the comparison. What do you learn?__

```{python}
#| label: Q3
#| code-summary: Read and format project data
#Create a new dataframe:
conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """
SELECT
  teams.teamID,
  teams.yearID,
  teams.HR,
  teams.W,
  salaries.teamID,
  salaries.salary
FROM
  teams
INNER JOIN
  salaries ON salaries.teamID = teams.teamID
WHERE
  teams.teamID = "BOS" OR teams.teamID = "CIN"
ORDER BY
  teams.teamID ASC
"""
df = pd.read_sql_query(p, conn)
df
```

```{python}
#| label: Q3-graph
#| code-summary: Read and format project data
#Create a new dataframe:
conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """
SELECT
  teamID,
  AVG(salary) AS average_salary
FROM
  salaries
WHERE
  teamID IN ('BOS', 'CIN')
GROUP BY
  teamID; 
"""
df = pd.read_sql_query(p, conn)
LetsPlot.setup_html()

(ggplot(data=df)
 + geom_bar(mapping=aes(x='teamID',y='average_salary',fill="teamID"), stat="identity", xlabel="Team", ylabel="Average Salary", title="Team Average Salary Comparison")
 + labs(title= "Team Average Salary Comparison", x= "Team", y ="Average Salary"))




```
__STRETCH QUESTIONS__
__1. Advanced Salary Distribution by Position (with Case Statement)__

```{python}
#| label: Q4
#| code-summary: Read and format project data

conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """
SELECT
  fieldingpost.playerID,
  COALESCE(MAX(salaries.salary), 'N/A') AS highest_salary,
  AVG(salaries.salary) AS avg_salary,
  COUNT(DISTINCT fieldingpost.playerID) AS total_players,
  fieldingpost.POS,
  salaries.teamID,
  CASE
    WHEN AVG(salaries.salary) >= 1000000 THEN 'High Salary'
    WHEN AVG(salaries.salary) >= 500000 AND AVG(salaries.salary) < 1000000 THEN 'Medium Salary'
    ELSE 'Low Salary'
  END AS salary_category
FROM
  fieldingpost
LEFT JOIN
  salaries ON salaries.playerID = fieldingpost.playerID
GROUP BY
  fieldingpost.POS
ORDER BY
  avg_salary DESC
LIMIT 10;
"""
df = pd.read_sql_query(p, conn)
df.head(10)

```
__2. Advanced Career Longevity and Performance (with Subqueries)__
```{python}
#| label: Q5
#| code-summary: Read and format project data

import sqlite3
import pandas as pd

# Connect to the SQLite database
conn = sqlite3.connect('lahmansbaseballdb.sqlite')

# First query: Calculate the average career length
p1 = """
WITH CareerLength AS (
    -- Calculate career length (max yearID - min yearID) for each player
    SELECT
        playerID,
        MIN(yearID) AS first_year,
        MAX(yearID) AS last_year,
        (MAX(yearID) - MIN(yearID)) AS career_length
    FROM
        Batting
    GROUP BY
        playerID
    HAVING
        COUNT(yearID) > 0 -- Ensuring the player has played at least one game
)
-- Calculate the average career length for all players
SELECT
    AVG(career_length) AS average_career_length
FROM
    CareerLength;
"""

# Execute the first query and store the result
avg_career_length_df = pd.read_sql_query(p1, conn)
print(avg_career_length_df)
```
```{python}
# Second query: Get the top 10 players with the longest careers
p2 = """
WITH CareerLength AS (
    -- Calculate career length (max yearID - min yearID) for each player
    SELECT
        playerID,
        MIN(yearID) AS first_year,
        MAX(yearID) AS last_year,
        (MAX(yearID) - MIN(yearID)) AS career_length
    FROM
        Batting
    GROUP BY
        playerID
    HAVING
        COUNT(yearID) > 0 -- Ensuring the player has played at least one game
)
-- Fetch the top 10 players with the longest careers
SELECT
    c.playerID,
    p.nameFirst AS first_name,
    p.nameLast AS last_name,
    c.career_length
FROM
    CareerLength c
JOIN
    People p ON c.playerID = p.playerID -- Use the correct 'People' table instead of 'MASTER'
ORDER BY
    c.career_length DESC
LIMIT 10;
"""

# Execute the second query and store the result
top_10_players_df = pd.read_sql_query(p2, conn)
print(top_10_players_df)

# Close the database connection
conn.close()
```

__Method checkpoint__
```{python}
conn = sqlite3.connect('lahmansbaseballdb.sqlite')
p = """


SELECT 
  H,
  AB,
  playerID,
  H*1.0/AB AS batting_average

FROM 
  batting
LIMIT 2;

"""
df = pd.read_sql_query(p, conn)
df
```